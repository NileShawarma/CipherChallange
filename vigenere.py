from collections import Counter

string
string = string.replace(" ","")[::-1]
print(string[-1])
RED = "\033[91m"
BLUE = "\033[94m"
RESET = "\033[0m"

print(f"String length: {len(string)}")
def seperators(string: str,keyLength: int) -> list:
    newArray = ["" for i in range(keyLength)]

    for index in range(keyLength):
        newArray[index] = string[index::keyLength]

    return newArray

def shift(text: str,s: int) -> str:
    result = ""

    # traverse text
    for i in range(len(text)):
        char = text[i]

        # Encrypt uppercase characters
        if (char.isupper()):
            result += chr((ord(char) + s-65) % 26 + 65)

        # Encrypt lowercase characters
        else:
            result += chr((ord(char) + s - 97) % 26 + 97)

    return result
def ic(self):
    freqs = Counter(self)
    length = len(self)

    ioc = sum([value*(value-1) for value in freqs.values()])/(length*(length-1))
    return ioc
keyLength = 7
seperatedText = seperators(string,keyLength)
for i in range(2,20):
    continue
    seperatedText = seperators(string,i)
    print(f"Key: {i}")
    seperatedText[0] = shift(seperatedText[0],0).lower() #X most common
    seperatedText[1] = shift(seperatedText[1],0).lower() #K most common
    seperatedText.append("hi")
    #seperatedText[2] = shift(seperatedText[2],0).lower() #E most common
    print(f"IC No1: {round(ic(seperatedText[0]),8)}, IC No2 : {round(ic(seperatedText[1]),8)}, IC No3 : {round(ic(seperatedText[2]),8)}")

seperatedText[0] = shift(seperatedText[0],6).lower() #Y most common 6
seperatedText[1] = shift(seperatedText[1],8).lower() #W most common 8 
seperatedText[2] = shift(seperatedText[2],22).upper() #E & I most common
seperatedText[3] = shift(seperatedText[3],19).upper() #L H A most common
seperatedText[4] = shift(seperatedText[4],18).lower() #M most common
seperatedText[5] = shift(seperatedText[5],15).upper() #P and E most common 
seperatedText[6] = shift(seperatedText[6],15).lower() #P most common

print(seperatedText[6])
print(ic(seperatedText[6]))
newString = ""
for i in range(len(string)):
    if (i%keyLength)==0: 
        print(newString)
        newString = ""
    character = seperatedText[i%keyLength][i//keyLength]
    if character.isupper():
        newString += RED + character + RESET
    else:
        newString += BLUE + character + RESET
print(newString)
"""
new = [firstPart,secondPart,thirdPart,fourthPart,fifthPart,sixthPart]
newString = ""
for i in range(len(string)):
    print(i//6)
    try:
        if new[i%6][i//6].isupper():
            newString+="_"
        else: newString+=new[i%6][i//6]
    except: pass
print(newString)
while True:
    pass
"""